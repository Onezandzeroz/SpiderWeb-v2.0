// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

// SpiderWeb Framework Models

model FrontendConnection {
  id           String   @id @default(cuid())
  name         String   @unique
  api_endpoint String
  auth_type    String   // 'oauth2', 'api_key', 'jwt'
  credentials String   // encrypted credentials
  api_schema   String   // openapi spec or URL
  is_active    Boolean  @default(true)
  last_used    DateTime?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("frontend_connections")
}

model ProcessedContent {
  id                String   @id @default(cuid())
  email_subject     String
  email_body        String
  email_sender      String
  content_type      String   // 'article', 'product', 'update', 'announcement', 'other'
  intent            String   // 'immediate', 'scheduled', 'draft'
  target_frontends  String   // JSON array of frontend names
  content           String   // JSON object
  media_files       String   // JSON array of media files
  processing_status String   @default("pending") // 'pending', 'processing', 'completed', 'failed'
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@map("processed_content")
}

model SystemError {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  error     String
  severity  String   // 'low', 'medium', 'high', 'critical'
  component String
  resolved  Boolean  @default(false)
  details   String?  // JSON object with additional error details
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("system_errors")
}

model ProcessingMetrics {
  id                        String   @id @default(cuid())
  date                      DateTime @default(now())
  total_processed           Int      @default(0)
  success_count             Int      @default(0)
  error_count               Int      @default(0)
  average_processing_time   Float    @default(0)
  frontend_connections_used Int      @default(0)
  memory_usage_mb           Float    @default(0)
  cpu_usage_percent         Float    @default(0)
  created_at                DateTime @default(now())

  @@unique([date])
  @@map("processing_metrics")
}